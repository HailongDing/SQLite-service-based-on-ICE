// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `IceInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __IceInterface_h__
#define __IceInterface_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace WISCOM
{

namespace DataBase
{

class BlobValue;

class SQLiteOperator;

}

}

}

namespace WISCOM
{

namespace DataBase
{

class BlobValue;
bool operator==(const BlobValue&, const BlobValue&);
bool operator<(const BlobValue&, const BlobValue&);

class SQLiteOperator;
bool operator==(const SQLiteOperator&, const SQLiteOperator&);
bool operator<(const SQLiteOperator&, const SQLiteOperator&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::WISCOM::DataBase::BlobValue*);
::IceProxy::Ice::Object* upCast(::IceProxy::WISCOM::DataBase::BlobValue*);

::Ice::Object* upCast(::WISCOM::DataBase::SQLiteOperator*);
::IceProxy::Ice::Object* upCast(::IceProxy::WISCOM::DataBase::SQLiteOperator*);

}

namespace WISCOM
{

namespace DataBase
{

typedef ::IceInternal::Handle< ::WISCOM::DataBase::BlobValue> BlobValuePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::WISCOM::DataBase::BlobValue> BlobValuePrx;

void __read(::IceInternal::BasicStream*, BlobValuePrx&);
void __patch__BlobValuePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::WISCOM::DataBase::SQLiteOperator> SQLiteOperatorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::WISCOM::DataBase::SQLiteOperator> SQLiteOperatorPrx;

void __read(::IceInternal::BasicStream*, SQLiteOperatorPrx&);
void __patch__SQLiteOperatorPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace WISCOM
{

namespace DataBase
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

}

namespace WISCOM
{

namespace DataBase
{

class Callback_SQLiteOperator_openDB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_openDB_Base> Callback_SQLiteOperator_openDBPtr;

class Callback_SQLiteOperator_closeDB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_closeDB_Base> Callback_SQLiteOperator_closeDBPtr;

class Callback_SQLiteOperator_execDML_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_execDML_Base> Callback_SQLiteOperator_execDMLPtr;

class Callback_SQLiteOperator_execDMLWithBlob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_execDMLWithBlob_Base> Callback_SQLiteOperator_execDMLWithBlobPtr;

class Callback_SQLiteOperator_execQuery_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_execQuery_Base> Callback_SQLiteOperator_execQueryPtr;

class Callback_SQLiteOperator_numFields_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_numFields_Base> Callback_SQLiteOperator_numFieldsPtr;

class Callback_SQLiteOperator_fieldIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_fieldIndex_Base> Callback_SQLiteOperator_fieldIndexPtr;

class Callback_SQLiteOperator_fieldName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_fieldName_Base> Callback_SQLiteOperator_fieldNamePtr;

class Callback_SQLiteOperator_fieldDataType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_fieldDataType_Base> Callback_SQLiteOperator_fieldDataTypePtr;

class Callback_SQLiteOperator_fieldIsNullById_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_fieldIsNullById_Base> Callback_SQLiteOperator_fieldIsNullByIdPtr;

class Callback_SQLiteOperator_fieldIsNullByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_fieldIsNullByName_Base> Callback_SQLiteOperator_fieldIsNullByNamePtr;

class Callback_SQLiteOperator_nextRow_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_nextRow_Base> Callback_SQLiteOperator_nextRowPtr;

class Callback_SQLiteOperator_lastRowId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_lastRowId_Base> Callback_SQLiteOperator_lastRowIdPtr;

class Callback_SQLiteOperator_eof_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_eof_Base> Callback_SQLiteOperator_eofPtr;

class Callback_SQLiteOperator_getIntFieldValueByIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getIntFieldValueByIndex_Base> Callback_SQLiteOperator_getIntFieldValueByIndexPtr;

class Callback_SQLiteOperator_getIntFieldValueByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getIntFieldValueByName_Base> Callback_SQLiteOperator_getIntFieldValueByNamePtr;

class Callback_SQLiteOperator_getFloatFieldValueByIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getFloatFieldValueByIndex_Base> Callback_SQLiteOperator_getFloatFieldValueByIndexPtr;

class Callback_SQLiteOperator_getFloatFieldValueByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getFloatFieldValueByName_Base> Callback_SQLiteOperator_getFloatFieldValueByNamePtr;

class Callback_SQLiteOperator_getStringFieldValueByIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getStringFieldValueByIndex_Base> Callback_SQLiteOperator_getStringFieldValueByIndexPtr;

class Callback_SQLiteOperator_getStringFieldValueByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getStringFieldValueByName_Base> Callback_SQLiteOperator_getStringFieldValueByNamePtr;

class Callback_SQLiteOperator_getBlobFieldValueByIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getBlobFieldValueByIndex_Base> Callback_SQLiteOperator_getBlobFieldValueByIndexPtr;

class Callback_SQLiteOperator_getBlobFieldValueByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_getBlobFieldValueByName_Base> Callback_SQLiteOperator_getBlobFieldValueByNamePtr;

class Callback_SQLiteOperator_interrupt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_interrupt_Base> Callback_SQLiteOperator_interruptPtr;

class Callback_SQLiteOperator_finalize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLiteOperator_finalize_Base> Callback_SQLiteOperator_finalizePtr;

}

}

namespace IceProxy
{

namespace WISCOM
{

namespace DataBase
{

class BlobValue : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<BlobValue> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlobValue> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlobValue*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<BlobValue*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SQLiteOperator : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int openDB(const ::std::string& dbName)
    {
        return openDB(dbName, 0);
    }
    ::Ice::Int openDB(const ::std::string& dbName, const ::Ice::Context& __ctx)
    {
        return openDB(dbName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName)
    {
        return begin_openDB(dbName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName, const ::Ice::Context& __ctx)
    {
        return begin_openDB(dbName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openDB(dbName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openDB(dbName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName, const ::WISCOM::DataBase::Callback_SQLiteOperator_openDBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openDB(dbName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openDB(const ::std::string& dbName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_openDBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openDB(dbName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_openDB(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int openDB(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_openDB(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool closeDB(::Ice::Int dbHandle)
    {
        return closeDB(dbHandle, 0);
    }
    bool closeDB(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return closeDB(dbHandle, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle)
    {
        return begin_closeDB(dbHandle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return begin_closeDB(dbHandle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeDB(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeDB(dbHandle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle, const ::WISCOM::DataBase::Callback_SQLiteOperator_closeDBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeDB(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_closeDBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeDB(dbHandle, &__ctx, __del, __cookie);
    }

    bool end_closeDB(const ::Ice::AsyncResultPtr&);
    
private:

    bool closeDB(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_closeDB(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool execDML(::Ice::Int dbHandle, const ::std::string& strSQL)
    {
        return execDML(dbHandle, strSQL, 0);
    }
    bool execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx)
    {
        return execDML(dbHandle, strSQL, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL)
    {
        return begin_execDML(dbHandle, strSQL, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx)
    {
        return begin_execDML(dbHandle, strSQL, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDML(dbHandle, strSQL, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDML(dbHandle, strSQL, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::Callback_SQLiteOperator_execDMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDML(dbHandle, strSQL, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_execDMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDML(dbHandle, strSQL, &__ctx, __del, __cookie);
    }

    bool end_execDML(const ::Ice::AsyncResultPtr&);
    
private:

    bool execDML(::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_execDML(::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3)
    {
        return execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, 0);
    }
    bool execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context& __ctx)
    {
        return execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context& __ctx)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::WISCOM::DataBase::Callback_SQLiteOperator_execDMLWithBlobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_execDMLWithBlobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, &__ctx, __del, __cookie);
    }

    bool end_execDMLWithBlob(const ::Ice::AsyncResultPtr&);
    
private:

    bool execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string execQuery(::Ice::Int dbHandle, const ::std::string& strSQL)
    {
        return execQuery(dbHandle, strSQL, 0);
    }
    ::std::string execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx)
    {
        return execQuery(dbHandle, strSQL, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL)
    {
        return begin_execQuery(dbHandle, strSQL, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx)
    {
        return begin_execQuery(dbHandle, strSQL, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execQuery(dbHandle, strSQL, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execQuery(dbHandle, strSQL, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::Callback_SQLiteOperator_execQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execQuery(dbHandle, strSQL, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_execQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execQuery(dbHandle, strSQL, &__ctx, __del, __cookie);
    }

    ::std::string end_execQuery(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string execQuery(::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_execQuery(::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int numFields(const ::std::string& queryIdentity)
    {
        return numFields(queryIdentity, 0);
    }
    ::Ice::Int numFields(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return numFields(queryIdentity, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity)
    {
        return begin_numFields(queryIdentity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return begin_numFields(queryIdentity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_numFields(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_numFields(queryIdentity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity, const ::WISCOM::DataBase::Callback_SQLiteOperator_numFieldsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_numFields(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_numFields(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_numFieldsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_numFields(queryIdentity, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_numFields(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int numFields(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_numFields(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return fieldIndex(queryIdentity, fieldName, 0);
    }
    ::Ice::Int fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return fieldIndex(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_fieldIndex(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_fieldIndex(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIndex(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIndex(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIndex(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIndex(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_fieldIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return fieldName(queryIdentity, nFieldIndex, 0);
    }
    ::std::string fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return fieldName(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldName(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::std::string end_fieldName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return fieldDataType(queryIdentity, nFieldIndex, 0);
    }
    ::Ice::Int fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return fieldDataType(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldDataTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldDataTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldDataType(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_fieldDataType(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return fieldIsNullById(queryIdentity, nFieldIndex, 0);
    }
    bool fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return fieldIsNullById(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIsNullByIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIsNullByIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullById(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    bool end_fieldIsNullById(const ::Ice::AsyncResultPtr&);
    
private:

    bool fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return fieldIsNullByName(queryIdentity, fieldName, 0);
    }
    bool fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return fieldIsNullByName(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIsNullByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_fieldIsNullByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fieldIsNullByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    bool end_fieldIsNullByName(const ::Ice::AsyncResultPtr&);
    
private:

    bool fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool nextRow(const ::std::string& queryIdentity)
    {
        return nextRow(queryIdentity, 0);
    }
    bool nextRow(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return nextRow(queryIdentity, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity)
    {
        return begin_nextRow(queryIdentity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return begin_nextRow(queryIdentity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nextRow(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nextRow(queryIdentity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity, const ::WISCOM::DataBase::Callback_SQLiteOperator_nextRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nextRow(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_nextRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nextRow(queryIdentity, &__ctx, __del, __cookie);
    }

    bool end_nextRow(const ::Ice::AsyncResultPtr&);
    
private:

    bool nextRow(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_nextRow(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long lastRowId(::Ice::Int dbHandle)
    {
        return lastRowId(dbHandle, 0);
    }
    ::Ice::Long lastRowId(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return lastRowId(dbHandle, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle)
    {
        return begin_lastRowId(dbHandle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return begin_lastRowId(dbHandle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lastRowId(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lastRowId(dbHandle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle, const ::WISCOM::DataBase::Callback_SQLiteOperator_lastRowIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lastRowId(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_lastRowIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lastRowId(dbHandle, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_lastRowId(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long lastRowId(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lastRowId(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool eof(const ::std::string& queryIdentity)
    {
        return eof(queryIdentity, 0);
    }
    bool eof(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return eof(queryIdentity, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity)
    {
        return begin_eof(queryIdentity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return begin_eof(queryIdentity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_eof(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_eof(queryIdentity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity, const ::WISCOM::DataBase::Callback_SQLiteOperator_eofPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_eof(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_eof(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_eofPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_eof(queryIdentity, &__ctx, __del, __cookie);
    }

    bool end_eof(const ::Ice::AsyncResultPtr&);
    
private:

    bool eof(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_eof(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return getIntFieldValueByIndex(queryIdentity, nFieldIndex, 0);
    }
    ::Ice::Int getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return getIntFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_getIntFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getIntFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getIntFieldValueByIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return getIntFieldValueByName(queryIdentity, fieldName, 0);
    }
    ::Ice::Int getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return getIntFieldValueByName(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_getIntFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getIntFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getIntFieldValueByName(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Double getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return getFloatFieldValueByIndex(queryIdentity, nFieldIndex, 0);
    }
    ::Ice::Double getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return getFloatFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_getFloatFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getFloatFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::Double end_getFloatFieldValueByIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Double getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Double getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return getFloatFieldValueByName(queryIdentity, fieldName, 0);
    }
    ::Ice::Double getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return getFloatFieldValueByName(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_getFloatFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getFloatFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFloatFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::Double end_getFloatFieldValueByName(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Double getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return getStringFieldValueByIndex(queryIdentity, nFieldIndex, 0);
    }
    ::std::string getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return getStringFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_getStringFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getStringFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::std::string end_getStringFieldValueByIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return getStringFieldValueByName(queryIdentity, fieldName, 0);
    }
    ::std::string getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return getStringFieldValueByName(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_getStringFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getStringFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStringFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::std::string end_getStringFieldValueByName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return getBlobFieldValueByIndex(queryIdentity, nFieldIndex, 0);
    }
    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return getBlobFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::WISCOM::DataBase::Callback_SQLiteOperator_getBlobFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getBlobFieldValueByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByIndex(queryIdentity, nFieldIndex, &__ctx, __del, __cookie);
    }

    ::WISCOM::DataBase::BlobValuePtr end_getBlobFieldValueByIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return getBlobFieldValueByName(queryIdentity, fieldName, 0);
    }
    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return getBlobFieldValueByName(queryIdentity, fieldName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::WISCOM::DataBase::Callback_SQLiteOperator_getBlobFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_getBlobFieldValueByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlobFieldValueByName(queryIdentity, fieldName, &__ctx, __del, __cookie);
    }

    ::WISCOM::DataBase::BlobValuePtr end_getBlobFieldValueByName(const ::Ice::AsyncResultPtr&);
    
private:

    ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool interrupt(::Ice::Int dbHandle)
    {
        return interrupt(dbHandle, 0);
    }
    bool interrupt(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return interrupt(dbHandle, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle)
    {
        return begin_interrupt(dbHandle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle, const ::Ice::Context& __ctx)
    {
        return begin_interrupt(dbHandle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_interrupt(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_interrupt(dbHandle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle, const ::WISCOM::DataBase::Callback_SQLiteOperator_interruptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_interrupt(dbHandle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int dbHandle, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_interruptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_interrupt(dbHandle, &__ctx, __del, __cookie);
    }

    bool end_interrupt(const ::Ice::AsyncResultPtr&);
    
private:

    bool interrupt(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_interrupt(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool finalize(const ::std::string& queryIdentity)
    {
        return finalize(queryIdentity, 0);
    }
    bool finalize(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return finalize(queryIdentity, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity)
    {
        return begin_finalize(queryIdentity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity, const ::Ice::Context& __ctx)
    {
        return begin_finalize(queryIdentity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finalize(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finalize(queryIdentity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity, const ::WISCOM::DataBase::Callback_SQLiteOperator_finalizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finalize(queryIdentity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finalize(const ::std::string& queryIdentity, const ::Ice::Context& __ctx, const ::WISCOM::DataBase::Callback_SQLiteOperator_finalizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finalize(queryIdentity, &__ctx, __del, __cookie);
    }

    bool end_finalize(const ::Ice::AsyncResultPtr&);
    
private:

    bool finalize(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finalize(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLiteOperator> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLiteOperator*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SQLiteOperator*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace WISCOM
{

namespace DataBase
{

class BlobValue : virtual public ::IceDelegate::Ice::Object
{
public:
};

class SQLiteOperator : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int openDB(const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool closeDB(::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool execDML(::Ice::Int, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Context*) = 0;

    virtual ::std::string execQuery(::Ice::Int, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int numFields(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::std::string fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool nextRow(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long lastRowId(::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool eof(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Double getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Double getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::std::string getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::std::string getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool interrupt(::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool finalize(const ::std::string&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace WISCOM
{

namespace DataBase
{

class BlobValue : virtual public ::IceDelegate::WISCOM::DataBase::BlobValue,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class SQLiteOperator : virtual public ::IceDelegate::WISCOM::DataBase::SQLiteOperator,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int openDB(const ::std::string&, const ::Ice::Context*);

    virtual bool closeDB(::Ice::Int, const ::Ice::Context*);

    virtual bool execDML(::Ice::Int, const ::std::string&, const ::Ice::Context*);

    virtual bool execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Context*);

    virtual ::std::string execQuery(::Ice::Int, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int numFields(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::std::string fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual bool fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual bool fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool nextRow(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Long lastRowId(::Ice::Int, const ::Ice::Context*);

    virtual bool eof(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Double getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Double getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::std::string getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::std::string getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool interrupt(::Ice::Int, const ::Ice::Context*);

    virtual bool finalize(const ::std::string&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace WISCOM
{

namespace DataBase
{

class BlobValue : virtual public ::IceDelegate::WISCOM::DataBase::BlobValue,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class SQLiteOperator : virtual public ::IceDelegate::WISCOM::DataBase::SQLiteOperator,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int openDB(const ::std::string&, const ::Ice::Context*);

    virtual bool closeDB(::Ice::Int, const ::Ice::Context*);

    virtual bool execDML(::Ice::Int, const ::std::string&, const ::Ice::Context*);

    virtual bool execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Context*);

    virtual ::std::string execQuery(::Ice::Int, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int numFields(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::std::string fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual bool fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual bool fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool nextRow(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Long lastRowId(::Ice::Int, const ::Ice::Context*);

    virtual bool eof(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Double getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Double getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::std::string getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::std::string getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool interrupt(::Ice::Int, const ::Ice::Context*);

    virtual bool finalize(const ::std::string&, const ::Ice::Context*);
};

}

}

}

namespace WISCOM
{

namespace DataBase
{

class BlobValue : virtual public ::Ice::Object
{
public:

    typedef BlobValuePrx ProxyType;
    typedef BlobValuePtr PointerType;
    
    BlobValue() {}
    explicit BlobValue(const ::WISCOM::DataBase::ByteSeq&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~BlobValue() {}

    friend class BlobValue__staticInit;

public:

    ::WISCOM::DataBase::ByteSeq data;
};

class BlobValue__staticInit
{
public:

    ::WISCOM::DataBase::BlobValue _init;
};

static BlobValue__staticInit _BlobValue_init;

inline bool operator==(const BlobValue& l, const BlobValue& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BlobValue& l, const BlobValue& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SQLiteOperator : virtual public ::Ice::Object
{
public:

    typedef SQLiteOperatorPrx ProxyType;
    typedef SQLiteOperatorPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int openDB(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___openDB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool closeDB(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___closeDB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool execDML(::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___execDML(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool execDMLWithBlob(::Ice::Int, const ::std::string&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::WISCOM::DataBase::BlobValuePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___execDMLWithBlob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string execQuery(::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___execQuery(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int numFields(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___numFields(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int fieldIndex(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fieldIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string fieldName(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fieldName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int fieldDataType(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fieldDataType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool fieldIsNullById(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fieldIsNullById(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool fieldIsNullByName(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fieldIsNullByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool nextRow(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___nextRow(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long lastRowId(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lastRowId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool eof(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___eof(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getIntFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getIntFieldValueByIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getIntFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getIntFieldValueByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Double getFloatFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFloatFieldValueByIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Double getFloatFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFloatFieldValueByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getStringFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStringFieldValueByIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getStringFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStringFieldValueByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByIndex(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBlobFieldValueByIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::WISCOM::DataBase::BlobValuePtr getBlobFieldValueByName(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBlobFieldValueByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool interrupt(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___interrupt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool finalize(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finalize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SQLiteOperator& l, const SQLiteOperator& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SQLiteOperator& l, const SQLiteOperator& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace WISCOM
{

namespace DataBase
{

template<class T>
class CallbackNC_SQLiteOperator_openDB : public Callback_SQLiteOperator_openDB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_openDB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_openDB(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_openDBPtr
newCallback_SQLiteOperator_openDB(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_openDB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_openDBPtr
newCallback_SQLiteOperator_openDB(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_openDB<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_openDB : public Callback_SQLiteOperator_openDB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_openDB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_openDB(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_openDBPtr
newCallback_SQLiteOperator_openDB(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_openDB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_openDBPtr
newCallback_SQLiteOperator_openDB(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_openDB<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_closeDB : public Callback_SQLiteOperator_closeDB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_closeDB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_closeDB(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_closeDBPtr
newCallback_SQLiteOperator_closeDB(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_closeDB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_closeDBPtr
newCallback_SQLiteOperator_closeDB(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_closeDB<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_closeDB : public Callback_SQLiteOperator_closeDB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_closeDB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_closeDB(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_closeDBPtr
newCallback_SQLiteOperator_closeDB(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_closeDB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_closeDBPtr
newCallback_SQLiteOperator_closeDB(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_closeDB<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_execDML : public Callback_SQLiteOperator_execDML_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_execDML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_execDML(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_execDMLPtr
newCallback_SQLiteOperator_execDML(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execDML<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_execDMLPtr
newCallback_SQLiteOperator_execDML(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execDML<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_execDML : public Callback_SQLiteOperator_execDML_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_execDML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_execDML(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_execDMLPtr
newCallback_SQLiteOperator_execDML(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execDML<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_execDMLPtr
newCallback_SQLiteOperator_execDML(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execDML<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_execDMLWithBlob : public Callback_SQLiteOperator_execDMLWithBlob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_execDMLWithBlob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_execDMLWithBlob(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_execDMLWithBlobPtr
newCallback_SQLiteOperator_execDMLWithBlob(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execDMLWithBlob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_execDMLWithBlobPtr
newCallback_SQLiteOperator_execDMLWithBlob(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execDMLWithBlob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_execDMLWithBlob : public Callback_SQLiteOperator_execDMLWithBlob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_execDMLWithBlob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_execDMLWithBlob(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_execDMLWithBlobPtr
newCallback_SQLiteOperator_execDMLWithBlob(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execDMLWithBlob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_execDMLWithBlobPtr
newCallback_SQLiteOperator_execDMLWithBlob(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execDMLWithBlob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_execQuery : public Callback_SQLiteOperator_execQuery_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SQLiteOperator_execQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_execQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_execQueryPtr
newCallback_SQLiteOperator_execQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execQuery<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_execQueryPtr
newCallback_SQLiteOperator_execQuery(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_execQuery<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_execQuery : public Callback_SQLiteOperator_execQuery_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SQLiteOperator_execQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_execQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_execQueryPtr
newCallback_SQLiteOperator_execQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_execQueryPtr
newCallback_SQLiteOperator_execQuery(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_execQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_numFields : public Callback_SQLiteOperator_numFields_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_numFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_numFields(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_numFieldsPtr
newCallback_SQLiteOperator_numFields(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_numFields<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_numFieldsPtr
newCallback_SQLiteOperator_numFields(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_numFields<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_numFields : public Callback_SQLiteOperator_numFields_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_numFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_numFields(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_numFieldsPtr
newCallback_SQLiteOperator_numFields(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_numFields<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_numFieldsPtr
newCallback_SQLiteOperator_numFields(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_numFields<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_fieldIndex : public Callback_SQLiteOperator_fieldIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_fieldIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fieldIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_fieldIndexPtr
newCallback_SQLiteOperator_fieldIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_fieldIndexPtr
newCallback_SQLiteOperator_fieldIndex(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_fieldIndex : public Callback_SQLiteOperator_fieldIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_fieldIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fieldIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_fieldIndexPtr
newCallback_SQLiteOperator_fieldIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_fieldIndexPtr
newCallback_SQLiteOperator_fieldIndex(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_fieldName : public Callback_SQLiteOperator_fieldName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SQLiteOperator_fieldName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_fieldName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_fieldNamePtr
newCallback_SQLiteOperator_fieldName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_fieldNamePtr
newCallback_SQLiteOperator_fieldName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_fieldName : public Callback_SQLiteOperator_fieldName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SQLiteOperator_fieldName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_fieldName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_fieldNamePtr
newCallback_SQLiteOperator_fieldName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_fieldNamePtr
newCallback_SQLiteOperator_fieldName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_fieldDataType : public Callback_SQLiteOperator_fieldDataType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_fieldDataType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fieldDataType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_fieldDataTypePtr
newCallback_SQLiteOperator_fieldDataType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldDataType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_fieldDataTypePtr
newCallback_SQLiteOperator_fieldDataType(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldDataType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_fieldDataType : public Callback_SQLiteOperator_fieldDataType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_fieldDataType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fieldDataType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_fieldDataTypePtr
newCallback_SQLiteOperator_fieldDataType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldDataType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_fieldDataTypePtr
newCallback_SQLiteOperator_fieldDataType(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldDataType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_fieldIsNullById : public Callback_SQLiteOperator_fieldIsNullById_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_fieldIsNullById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fieldIsNullById(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_fieldIsNullByIdPtr
newCallback_SQLiteOperator_fieldIsNullById(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIsNullById<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_fieldIsNullByIdPtr
newCallback_SQLiteOperator_fieldIsNullById(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIsNullById<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_fieldIsNullById : public Callback_SQLiteOperator_fieldIsNullById_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_fieldIsNullById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fieldIsNullById(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_fieldIsNullByIdPtr
newCallback_SQLiteOperator_fieldIsNullById(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIsNullById<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_fieldIsNullByIdPtr
newCallback_SQLiteOperator_fieldIsNullById(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIsNullById<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_fieldIsNullByName : public Callback_SQLiteOperator_fieldIsNullByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_fieldIsNullByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fieldIsNullByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_fieldIsNullByNamePtr
newCallback_SQLiteOperator_fieldIsNullByName(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIsNullByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_fieldIsNullByNamePtr
newCallback_SQLiteOperator_fieldIsNullByName(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_fieldIsNullByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_fieldIsNullByName : public Callback_SQLiteOperator_fieldIsNullByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_fieldIsNullByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fieldIsNullByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_fieldIsNullByNamePtr
newCallback_SQLiteOperator_fieldIsNullByName(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIsNullByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_fieldIsNullByNamePtr
newCallback_SQLiteOperator_fieldIsNullByName(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_fieldIsNullByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_nextRow : public Callback_SQLiteOperator_nextRow_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_nextRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_nextRow(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_nextRowPtr
newCallback_SQLiteOperator_nextRow(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_nextRow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_nextRowPtr
newCallback_SQLiteOperator_nextRow(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_nextRow<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_nextRow : public Callback_SQLiteOperator_nextRow_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_nextRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_nextRow(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_nextRowPtr
newCallback_SQLiteOperator_nextRow(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_nextRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_nextRowPtr
newCallback_SQLiteOperator_nextRow(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_nextRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_lastRowId : public Callback_SQLiteOperator_lastRowId_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_SQLiteOperator_lastRowId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_lastRowId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_lastRowIdPtr
newCallback_SQLiteOperator_lastRowId(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_lastRowId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_lastRowIdPtr
newCallback_SQLiteOperator_lastRowId(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_lastRowId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_lastRowId : public Callback_SQLiteOperator_lastRowId_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_SQLiteOperator_lastRowId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_lastRowId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_lastRowIdPtr
newCallback_SQLiteOperator_lastRowId(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_lastRowId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_lastRowIdPtr
newCallback_SQLiteOperator_lastRowId(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_lastRowId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_eof : public Callback_SQLiteOperator_eof_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_eof(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_eof(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_eofPtr
newCallback_SQLiteOperator_eof(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_eof<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_eofPtr
newCallback_SQLiteOperator_eof(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_eof<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_eof : public Callback_SQLiteOperator_eof_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_eof(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_eof(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_eofPtr
newCallback_SQLiteOperator_eof(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_eof<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_eofPtr
newCallback_SQLiteOperator_eof(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_eof<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getIntFieldValueByIndex : public Callback_SQLiteOperator_getIntFieldValueByIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_getIntFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getIntFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getIntFieldValueByIndexPtr
newCallback_SQLiteOperator_getIntFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getIntFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getIntFieldValueByIndexPtr
newCallback_SQLiteOperator_getIntFieldValueByIndex(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getIntFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getIntFieldValueByIndex : public Callback_SQLiteOperator_getIntFieldValueByIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_getIntFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getIntFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getIntFieldValueByIndexPtr
newCallback_SQLiteOperator_getIntFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getIntFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getIntFieldValueByIndexPtr
newCallback_SQLiteOperator_getIntFieldValueByIndex(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getIntFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getIntFieldValueByName : public Callback_SQLiteOperator_getIntFieldValueByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLiteOperator_getIntFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getIntFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getIntFieldValueByNamePtr
newCallback_SQLiteOperator_getIntFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getIntFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getIntFieldValueByNamePtr
newCallback_SQLiteOperator_getIntFieldValueByName(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getIntFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getIntFieldValueByName : public Callback_SQLiteOperator_getIntFieldValueByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLiteOperator_getIntFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getIntFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getIntFieldValueByNamePtr
newCallback_SQLiteOperator_getIntFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getIntFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getIntFieldValueByNamePtr
newCallback_SQLiteOperator_getIntFieldValueByName(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getIntFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getFloatFieldValueByIndex : public Callback_SQLiteOperator_getFloatFieldValueByIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Double);

    CallbackNC_SQLiteOperator_getFloatFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_getFloatFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getFloatFieldValueByIndexPtr
newCallback_SQLiteOperator_getFloatFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getFloatFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getFloatFieldValueByIndexPtr
newCallback_SQLiteOperator_getFloatFieldValueByIndex(T* instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getFloatFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getFloatFieldValueByIndex : public Callback_SQLiteOperator_getFloatFieldValueByIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Double, const CT&);

    Callback_SQLiteOperator_getFloatFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_getFloatFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getFloatFieldValueByIndexPtr
newCallback_SQLiteOperator_getFloatFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getFloatFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getFloatFieldValueByIndexPtr
newCallback_SQLiteOperator_getFloatFieldValueByIndex(T* instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getFloatFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getFloatFieldValueByName : public Callback_SQLiteOperator_getFloatFieldValueByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Double);

    CallbackNC_SQLiteOperator_getFloatFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_getFloatFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getFloatFieldValueByNamePtr
newCallback_SQLiteOperator_getFloatFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getFloatFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getFloatFieldValueByNamePtr
newCallback_SQLiteOperator_getFloatFieldValueByName(T* instance, void (T::*cb)(::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getFloatFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getFloatFieldValueByName : public Callback_SQLiteOperator_getFloatFieldValueByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Double, const CT&);

    Callback_SQLiteOperator_getFloatFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Double __ret;
        try
        {
            __ret = __proxy->end_getFloatFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getFloatFieldValueByNamePtr
newCallback_SQLiteOperator_getFloatFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getFloatFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getFloatFieldValueByNamePtr
newCallback_SQLiteOperator_getFloatFieldValueByName(T* instance, void (T::*cb)(::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getFloatFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getStringFieldValueByIndex : public Callback_SQLiteOperator_getStringFieldValueByIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SQLiteOperator_getStringFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStringFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getStringFieldValueByIndexPtr
newCallback_SQLiteOperator_getStringFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getStringFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getStringFieldValueByIndexPtr
newCallback_SQLiteOperator_getStringFieldValueByIndex(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getStringFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getStringFieldValueByIndex : public Callback_SQLiteOperator_getStringFieldValueByIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SQLiteOperator_getStringFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStringFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getStringFieldValueByIndexPtr
newCallback_SQLiteOperator_getStringFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getStringFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getStringFieldValueByIndexPtr
newCallback_SQLiteOperator_getStringFieldValueByIndex(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getStringFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getStringFieldValueByName : public Callback_SQLiteOperator_getStringFieldValueByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SQLiteOperator_getStringFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStringFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getStringFieldValueByNamePtr
newCallback_SQLiteOperator_getStringFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getStringFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getStringFieldValueByNamePtr
newCallback_SQLiteOperator_getStringFieldValueByName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getStringFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getStringFieldValueByName : public Callback_SQLiteOperator_getStringFieldValueByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SQLiteOperator_getStringFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStringFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getStringFieldValueByNamePtr
newCallback_SQLiteOperator_getStringFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getStringFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getStringFieldValueByNamePtr
newCallback_SQLiteOperator_getStringFieldValueByName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getStringFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getBlobFieldValueByIndex : public Callback_SQLiteOperator_getBlobFieldValueByIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::WISCOM::DataBase::BlobValuePtr&);

    CallbackNC_SQLiteOperator_getBlobFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::WISCOM::DataBase::BlobValuePtr __ret;
        try
        {
            __ret = __proxy->end_getBlobFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getBlobFieldValueByIndexPtr
newCallback_SQLiteOperator_getBlobFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getBlobFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getBlobFieldValueByIndexPtr
newCallback_SQLiteOperator_getBlobFieldValueByIndex(T* instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getBlobFieldValueByIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getBlobFieldValueByIndex : public Callback_SQLiteOperator_getBlobFieldValueByIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&);

    Callback_SQLiteOperator_getBlobFieldValueByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::WISCOM::DataBase::BlobValuePtr __ret;
        try
        {
            __ret = __proxy->end_getBlobFieldValueByIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getBlobFieldValueByIndexPtr
newCallback_SQLiteOperator_getBlobFieldValueByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getBlobFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getBlobFieldValueByIndexPtr
newCallback_SQLiteOperator_getBlobFieldValueByIndex(T* instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getBlobFieldValueByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_getBlobFieldValueByName : public Callback_SQLiteOperator_getBlobFieldValueByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::WISCOM::DataBase::BlobValuePtr&);

    CallbackNC_SQLiteOperator_getBlobFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::WISCOM::DataBase::BlobValuePtr __ret;
        try
        {
            __ret = __proxy->end_getBlobFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_getBlobFieldValueByNamePtr
newCallback_SQLiteOperator_getBlobFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getBlobFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_getBlobFieldValueByNamePtr
newCallback_SQLiteOperator_getBlobFieldValueByName(T* instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_getBlobFieldValueByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_getBlobFieldValueByName : public Callback_SQLiteOperator_getBlobFieldValueByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&);

    Callback_SQLiteOperator_getBlobFieldValueByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        ::WISCOM::DataBase::BlobValuePtr __ret;
        try
        {
            __ret = __proxy->end_getBlobFieldValueByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_getBlobFieldValueByNamePtr
newCallback_SQLiteOperator_getBlobFieldValueByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getBlobFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_getBlobFieldValueByNamePtr
newCallback_SQLiteOperator_getBlobFieldValueByName(T* instance, void (T::*cb)(const ::WISCOM::DataBase::BlobValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_getBlobFieldValueByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_interrupt : public Callback_SQLiteOperator_interrupt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_interrupt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_interrupt(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_interruptPtr
newCallback_SQLiteOperator_interrupt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_interrupt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_interruptPtr
newCallback_SQLiteOperator_interrupt(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_interrupt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_interrupt : public Callback_SQLiteOperator_interrupt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_interrupt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_interrupt(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_interruptPtr
newCallback_SQLiteOperator_interrupt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_interrupt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_interruptPtr
newCallback_SQLiteOperator_interrupt(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_interrupt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLiteOperator_finalize : public Callback_SQLiteOperator_finalize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SQLiteOperator_finalize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_finalize(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLiteOperator_finalizePtr
newCallback_SQLiteOperator_finalize(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_finalize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLiteOperator_finalizePtr
newCallback_SQLiteOperator_finalize(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLiteOperator_finalize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLiteOperator_finalize : public Callback_SQLiteOperator_finalize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SQLiteOperator_finalize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WISCOM::DataBase::SQLiteOperatorPrx __proxy = ::WISCOM::DataBase::SQLiteOperatorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_finalize(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLiteOperator_finalizePtr
newCallback_SQLiteOperator_finalize(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_finalize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLiteOperator_finalizePtr
newCallback_SQLiteOperator_finalize(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLiteOperator_finalize<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
