// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `IceInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <IceInterface.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __WISCOM__DataBase__SQLiteOperator__openDB_name = "openDB";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__closeDB_name = "closeDB";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__execDML_name = "execDML";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name = "execDMLWithBlob";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__execQuery_name = "execQuery";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__numFields_name = "numFields";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__fieldIndex_name = "fieldIndex";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__fieldName_name = "fieldName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__fieldDataType_name = "fieldDataType";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name = "fieldIsNullById";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name = "fieldIsNullByName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__nextRow_name = "nextRow";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__lastRowId_name = "lastRowId";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__eof_name = "eof";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name = "getIntFieldValueByIndex";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name = "getIntFieldValueByName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name = "getFloatFieldValueByIndex";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name = "getFloatFieldValueByName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name = "getStringFieldValueByIndex";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name = "getStringFieldValueByName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name = "getBlobFieldValueByIndex";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name = "getBlobFieldValueByName";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__interrupt_name = "interrupt";

static const ::std::string __WISCOM__DataBase__SQLiteOperator__finalize_name = "finalize";

::Ice::Object* IceInternal::upCast(::WISCOM::DataBase::BlobValue* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::WISCOM::DataBase::BlobValue* p) { return p; }

::Ice::Object* IceInternal::upCast(::WISCOM::DataBase::SQLiteOperator* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::WISCOM::DataBase::SQLiteOperator* p) { return p; }

void
WISCOM::DataBase::__read(::IceInternal::BasicStream* __is, ::WISCOM::DataBase::BlobValuePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::WISCOM::DataBase::BlobValue;
        v->__copyFrom(proxy);
    }
}

void
WISCOM::DataBase::__read(::IceInternal::BasicStream* __is, ::WISCOM::DataBase::SQLiteOperatorPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::WISCOM::DataBase::SQLiteOperator;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::WISCOM::DataBase::BlobValue::ice_staticId()
{
    return ::WISCOM::DataBase::BlobValue::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::WISCOM::DataBase::BlobValue::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::WISCOM::DataBase::BlobValue);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::WISCOM::DataBase::BlobValue::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::WISCOM::DataBase::BlobValue);
}

::IceProxy::Ice::Object*
IceProxy::WISCOM::DataBase::BlobValue::__newInstance() const
{
    return new BlobValue;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::openDB(const ::std::string& dbName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__openDB_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->openDB(dbName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_openDB(const ::std::string& dbName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__openDB_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__openDB_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__openDB_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_openDB(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__openDB_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::closeDB(::Ice::Int dbHandle, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__closeDB_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->closeDB(dbHandle, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_closeDB(::Ice::Int dbHandle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__closeDB_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__closeDB_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__closeDB_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_closeDB(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__closeDB_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execDML_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->execDML(dbHandle, strSQL, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execDML_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__execDML_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__execDML_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->write(strSQL);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_execDML(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__execDML_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->write(strSQL);
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data1.get())));
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data2.get())));
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data3.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_execDMLWithBlob(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execQuery_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->execQuery(dbHandle, strSQL, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__execQuery_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__execQuery_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__execQuery_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->write(strSQL);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::end_execQuery(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__execQuery_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::numFields(const ::std::string& queryIdentity, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__numFields_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->numFields(queryIdentity, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_numFields(const ::std::string& queryIdentity, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__numFields_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__numFields_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__numFields_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_numFields(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__numFields_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->fieldIndex(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__fieldIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__fieldIndex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_fieldIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__fieldIndex_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->fieldName(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__fieldName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__fieldName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::end_fieldName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__fieldName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldDataType_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->fieldDataType(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldDataType_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__fieldDataType_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__fieldDataType_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_fieldDataType(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__fieldDataType_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->fieldIsNullById(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_fieldIsNullById(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->fieldIsNullByName(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_fieldIsNullByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::nextRow(const ::std::string& queryIdentity, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__nextRow_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->nextRow(queryIdentity, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_nextRow(const ::std::string& queryIdentity, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__nextRow_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__nextRow_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__nextRow_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_nextRow(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__nextRow_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Long
IceProxy::WISCOM::DataBase::SQLiteOperator::lastRowId(::Ice::Int dbHandle, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__lastRowId_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->lastRowId(dbHandle, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_lastRowId(::Ice::Int dbHandle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__lastRowId_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__lastRowId_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__lastRowId_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::WISCOM::DataBase::SQLiteOperator::end_lastRowId(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__lastRowId_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::eof(const ::std::string& queryIdentity, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__eof_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->eof(queryIdentity, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_eof(const ::std::string& queryIdentity, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__eof_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__eof_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__eof_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_eof(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__eof_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getIntFieldValueByIndex(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getIntFieldValueByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getIntFieldValueByName(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getIntFieldValueByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Double
IceProxy::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getFloatFieldValueByIndex(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Double
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getFloatFieldValueByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name);
    ::Ice::Double __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Double
IceProxy::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getFloatFieldValueByName(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Double
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getFloatFieldValueByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name);
    ::Ice::Double __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getStringFieldValueByIndex(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getStringFieldValueByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getStringFieldValueByName(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getStringFieldValueByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::WISCOM::DataBase::BlobValuePtr
IceProxy::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getBlobFieldValueByIndex(queryIdentity, nFieldIndex, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::WISCOM::DataBase::BlobValuePtr
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getBlobFieldValueByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name);
    ::WISCOM::DataBase::BlobValuePtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::WISCOM::DataBase::BlobValuePtr
IceProxy::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->getBlobFieldValueByName(queryIdentity, fieldName, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->write(fieldName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::WISCOM::DataBase::BlobValuePtr
IceProxy::WISCOM::DataBase::SQLiteOperator::end_getBlobFieldValueByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name);
    ::WISCOM::DataBase::BlobValuePtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::interrupt(::Ice::Int dbHandle, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__interrupt_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->interrupt(dbHandle, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_interrupt(::Ice::Int dbHandle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__interrupt_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__interrupt_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__interrupt_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(dbHandle);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_interrupt(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__interrupt_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::finalize(const ::std::string& queryIdentity, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__WISCOM__DataBase__SQLiteOperator__finalize_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::WISCOM::DataBase::SQLiteOperator* __del = dynamic_cast< ::IceDelegate::WISCOM::DataBase::SQLiteOperator*>(__delBase.get());
            return __del->finalize(queryIdentity, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::WISCOM::DataBase::SQLiteOperator::begin_finalize(const ::std::string& queryIdentity, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__WISCOM__DataBase__SQLiteOperator__finalize_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __WISCOM__DataBase__SQLiteOperator__finalize_name, __del, __cookie);
    try
    {
        __result->__prepare(__WISCOM__DataBase__SQLiteOperator__finalize_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(queryIdentity);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::WISCOM::DataBase::SQLiteOperator::end_finalize(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __WISCOM__DataBase__SQLiteOperator__finalize_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::WISCOM::DataBase::SQLiteOperator::ice_staticId()
{
    return ::WISCOM::DataBase::SQLiteOperator::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::WISCOM::DataBase::SQLiteOperator::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::WISCOM::DataBase::SQLiteOperator);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::WISCOM::DataBase::SQLiteOperator::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::WISCOM::DataBase::SQLiteOperator);
}

::IceProxy::Ice::Object*
IceProxy::WISCOM::DataBase::SQLiteOperator::__newInstance() const
{
    return new SQLiteOperator;
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::openDB(const ::std::string& dbName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__openDB_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::closeDB(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__closeDB_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__execDML_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
        __os->write(strSQL);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
        __os->write(strSQL);
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data1.get())));
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data2.get())));
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(data3.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::WISCOM::DataBase::SQLiteOperator::execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__execQuery_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
        __os->write(strSQL);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::numFields(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__numFields_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__fieldIndex_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::WISCOM::DataBase::SQLiteOperator::fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__fieldName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__fieldDataType_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::nextRow(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__nextRow_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::WISCOM::DataBase::SQLiteOperator::lastRowId(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__lastRowId_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::eof(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__eof_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Double
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Double __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Double
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Double __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::WISCOM::DataBase::BlobValuePtr
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(nFieldIndex);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::WISCOM::DataBase::BlobValuePtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::WISCOM::DataBase::BlobValuePtr
IceDelegateM::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
        __os->write(fieldName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::WISCOM::DataBase::BlobValuePtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::interrupt(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__interrupt_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(dbHandle);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::WISCOM::DataBase::SQLiteOperator::finalize(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __WISCOM__DataBase__SQLiteOperator__finalize_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(queryIdentity);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::openDB(const ::std::string& dbName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& dbName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbName(dbName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->openDB(_m_dbName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_dbName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__openDB_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, dbName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::closeDB(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, ::Ice::Int dbHandle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->closeDB(_m_dbHandle, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        ::Ice::Int _m_dbHandle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__closeDB_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, dbHandle, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::execDML(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, ::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle),
            _m_strSQL(strSQL)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->execDML(_m_dbHandle, _m_strSQL, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        ::Ice::Int _m_dbHandle;
        const ::std::string& _m_strSQL;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__execDML_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, dbHandle, strSQL, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::execDMLWithBlob(::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, ::Ice::Int dbHandle, const ::std::string& strSQL, const ::WISCOM::DataBase::BlobValuePtr& data1, const ::WISCOM::DataBase::BlobValuePtr& data2, const ::WISCOM::DataBase::BlobValuePtr& data3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle),
            _m_strSQL(strSQL),
            _m_data1(data1),
            _m_data2(data2),
            _m_data3(data3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->execDMLWithBlob(_m_dbHandle, _m_strSQL, _m_data1, _m_data2, _m_data3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        ::Ice::Int _m_dbHandle;
        const ::std::string& _m_strSQL;
        const ::WISCOM::DataBase::BlobValuePtr& _m_data1;
        const ::WISCOM::DataBase::BlobValuePtr& _m_data2;
        const ::WISCOM::DataBase::BlobValuePtr& _m_data3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__execDMLWithBlob_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, dbHandle, strSQL, data1, data2, data3, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::WISCOM::DataBase::SQLiteOperator::execQuery(::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, ::Ice::Int dbHandle, const ::std::string& strSQL, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle),
            _m_strSQL(strSQL)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->execQuery(_m_dbHandle, _m_strSQL, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        ::Ice::Int _m_dbHandle;
        const ::std::string& _m_strSQL;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__execQuery_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, dbHandle, strSQL, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::numFields(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& queryIdentity, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->numFields(_m_queryIdentity, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_queryIdentity;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__numFields_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::fieldIndex(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fieldIndex(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__fieldIndex_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::WISCOM::DataBase::SQLiteOperator::fieldName(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fieldName(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__fieldName_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::fieldDataType(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fieldDataType(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__fieldDataType_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::fieldIsNullById(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fieldIsNullById(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__fieldIsNullById_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::fieldIsNullByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fieldIsNullByName(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__fieldIsNullByName_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::nextRow(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& queryIdentity, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->nextRow(_m_queryIdentity, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_queryIdentity;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__nextRow_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Long
IceDelegateD::WISCOM::DataBase::SQLiteOperator::lastRowId(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, ::Ice::Int dbHandle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->lastRowId(_m_dbHandle, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Long& _result;
        ::Ice::Int _m_dbHandle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__lastRowId_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, dbHandle, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::eof(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& queryIdentity, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->eof(_m_queryIdentity, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_queryIdentity;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__eof_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getIntFieldValueByIndex(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByIndex_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getIntFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getIntFieldValueByName(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getIntFieldValueByName_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Double
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Double& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getFloatFieldValueByIndex(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Double& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByIndex_name, ::Ice::Normal, __context);
    ::Ice::Double __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Double
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getFloatFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Double& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getFloatFieldValueByName(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Double& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getFloatFieldValueByName_name, ::Ice::Normal, __context);
    ::Ice::Double __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getStringFieldValueByIndex(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByIndex_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getStringFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getStringFieldValueByName(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getStringFieldValueByName_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::WISCOM::DataBase::BlobValuePtr
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByIndex(const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::WISCOM::DataBase::BlobValuePtr& __result, const ::std::string& queryIdentity, ::Ice::Int nFieldIndex, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_nFieldIndex(nFieldIndex)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getBlobFieldValueByIndex(_m_queryIdentity, _m_nFieldIndex, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::WISCOM::DataBase::BlobValuePtr& _result;
        const ::std::string& _m_queryIdentity;
        ::Ice::Int _m_nFieldIndex;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByIndex_name, ::Ice::Normal, __context);
    ::WISCOM::DataBase::BlobValuePtr __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, nFieldIndex, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::WISCOM::DataBase::BlobValuePtr
IceDelegateD::WISCOM::DataBase::SQLiteOperator::getBlobFieldValueByName(const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::WISCOM::DataBase::BlobValuePtr& __result, const ::std::string& queryIdentity, const ::std::string& fieldName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity),
            _m_fieldName(fieldName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getBlobFieldValueByName(_m_queryIdentity, _m_fieldName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::WISCOM::DataBase::BlobValuePtr& _result;
        const ::std::string& _m_queryIdentity;
        const ::std::string& _m_fieldName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__getBlobFieldValueByName_name, ::Ice::Normal, __context);
    ::WISCOM::DataBase::BlobValuePtr __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, fieldName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::interrupt(::Ice::Int dbHandle, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, ::Ice::Int dbHandle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_dbHandle(dbHandle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->interrupt(_m_dbHandle, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        ::Ice::Int _m_dbHandle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__interrupt_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, dbHandle, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::WISCOM::DataBase::SQLiteOperator::finalize(const ::std::string& queryIdentity, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& queryIdentity, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_queryIdentity(queryIdentity)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::WISCOM::DataBase::SQLiteOperator* servant = dynamic_cast< ::WISCOM::DataBase::SQLiteOperator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->finalize(_m_queryIdentity, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_queryIdentity;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __WISCOM__DataBase__SQLiteOperator__finalize_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, queryIdentity, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

WISCOM::DataBase::BlobValue::BlobValue(const ::WISCOM::DataBase::ByteSeq& __ice_data) :
    data(__ice_data)
{
}

::Ice::ObjectPtr
WISCOM::DataBase::BlobValue::ice_clone() const
{
    ::WISCOM::DataBase::BlobValuePtr __p = new ::WISCOM::DataBase::BlobValue(*this);
    return __p;
}

static const ::std::string __WISCOM__DataBase__BlobValue_ids[2] =
{
    "::Ice::Object",
    "::WISCOM::DataBase::BlobValue"
};

bool
WISCOM::DataBase::BlobValue::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__WISCOM__DataBase__BlobValue_ids, __WISCOM__DataBase__BlobValue_ids + 2, _s);
}

::std::vector< ::std::string>
WISCOM::DataBase::BlobValue::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__WISCOM__DataBase__BlobValue_ids[0], &__WISCOM__DataBase__BlobValue_ids[2]);
}

const ::std::string&
WISCOM::DataBase::BlobValue::ice_id(const ::Ice::Current&) const
{
    return __WISCOM__DataBase__BlobValue_ids[1];
}

const ::std::string&
WISCOM::DataBase::BlobValue::ice_staticId()
{
    return __WISCOM__DataBase__BlobValue_ids[1];
}

void
WISCOM::DataBase::BlobValue::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    if(data.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&data[0], &data[0] + data.size());
    }
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
WISCOM::DataBase::BlobValue::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___data;
    __is->read(___data);
    ::std::vector< ::Ice::Byte>(___data.first, ___data.second).swap(data);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
WISCOM::DataBase::BlobValue::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type WISCOM::DataBase::BlobValue was not generated with stream support";
    throw ex;
}

void
WISCOM::DataBase::BlobValue::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type WISCOM::DataBase::BlobValue was not generated with stream support";
    throw ex;
}
#endif

class __F__WISCOM__DataBase__BlobValue : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::WISCOM::DataBase::BlobValue::ice_staticId());
        return new ::WISCOM::DataBase::BlobValue;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__WISCOM__DataBase__BlobValue_Ptr = new __F__WISCOM__DataBase__BlobValue;

const ::Ice::ObjectFactoryPtr&
WISCOM::DataBase::BlobValue::ice_factory()
{
    return __F__WISCOM__DataBase__BlobValue_Ptr;
}

class __F__WISCOM__DataBase__BlobValue__Init
{
public:

    __F__WISCOM__DataBase__BlobValue__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::WISCOM::DataBase::BlobValue::ice_staticId(), ::WISCOM::DataBase::BlobValue::ice_factory());
    }

    ~__F__WISCOM__DataBase__BlobValue__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::WISCOM::DataBase::BlobValue::ice_staticId());
    }
};

static __F__WISCOM__DataBase__BlobValue__Init __F__WISCOM__DataBase__BlobValue__i;

#ifdef __APPLE__
extern "C" { void __F__WISCOM__DataBase__BlobValue__initializer() {} }
#endif

void 
WISCOM::DataBase::__patch__BlobValuePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::WISCOM::DataBase::BlobValuePtr* p = static_cast< ::WISCOM::DataBase::BlobValuePtr*>(__addr);
    assert(p);
    *p = ::WISCOM::DataBase::BlobValuePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::WISCOM::DataBase::BlobValue::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
WISCOM::DataBase::SQLiteOperator::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __WISCOM__DataBase__SQLiteOperator_ids[2] =
{
    "::Ice::Object",
    "::WISCOM::DataBase::SQLiteOperator"
};

bool
WISCOM::DataBase::SQLiteOperator::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__WISCOM__DataBase__SQLiteOperator_ids, __WISCOM__DataBase__SQLiteOperator_ids + 2, _s);
}

::std::vector< ::std::string>
WISCOM::DataBase::SQLiteOperator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__WISCOM__DataBase__SQLiteOperator_ids[0], &__WISCOM__DataBase__SQLiteOperator_ids[2]);
}

const ::std::string&
WISCOM::DataBase::SQLiteOperator::ice_id(const ::Ice::Current&) const
{
    return __WISCOM__DataBase__SQLiteOperator_ids[1];
}

const ::std::string&
WISCOM::DataBase::SQLiteOperator::ice_staticId()
{
    return __WISCOM__DataBase__SQLiteOperator_ids[1];
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___openDB(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string dbName;
    __is->read(dbName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = openDB(dbName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___closeDB(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    __is->read(dbHandle);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = closeDB(dbHandle, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___execDML(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    ::std::string strSQL;
    __is->read(dbHandle);
    __is->read(strSQL);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = execDML(dbHandle, strSQL, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___execDMLWithBlob(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    ::std::string strSQL;
    ::WISCOM::DataBase::BlobValuePtr data1;
    ::WISCOM::DataBase::BlobValuePtr data2;
    ::WISCOM::DataBase::BlobValuePtr data3;
    __is->read(dbHandle);
    __is->read(strSQL);
    __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &data1);
    __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &data2);
    __is->read(::WISCOM::DataBase::__patch__BlobValuePtr, &data3);
    __is->readPendingObjects();
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = execDMLWithBlob(dbHandle, strSQL, data1, data2, data3, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___execQuery(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    ::std::string strSQL;
    __is->read(dbHandle);
    __is->read(strSQL);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = execQuery(dbHandle, strSQL, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___numFields(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    __is->read(queryIdentity);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = numFields(queryIdentity, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___fieldIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = fieldIndex(queryIdentity, fieldName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___fieldName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = fieldName(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___fieldDataType(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = fieldDataType(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___fieldIsNullById(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = fieldIsNullById(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___fieldIsNullByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = fieldIsNullByName(queryIdentity, fieldName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___nextRow(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    __is->read(queryIdentity);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = nextRow(queryIdentity, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___lastRowId(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    __is->read(dbHandle);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Long __ret = lastRowId(dbHandle, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___eof(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    __is->read(queryIdentity);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = eof(queryIdentity, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getIntFieldValueByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getIntFieldValueByIndex(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getIntFieldValueByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getIntFieldValueByName(queryIdentity, fieldName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getFloatFieldValueByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Double __ret = getFloatFieldValueByIndex(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getFloatFieldValueByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Double __ret = getFloatFieldValueByName(queryIdentity, fieldName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getStringFieldValueByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = getStringFieldValueByIndex(queryIdentity, nFieldIndex, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getStringFieldValueByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = getStringFieldValueByName(queryIdentity, fieldName, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getBlobFieldValueByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::Ice::Int nFieldIndex;
    __is->read(queryIdentity);
    __is->read(nFieldIndex);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::WISCOM::DataBase::BlobValuePtr __ret = getBlobFieldValueByIndex(queryIdentity, nFieldIndex, __current);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___getBlobFieldValueByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    ::std::string fieldName;
    __is->read(queryIdentity);
    __is->read(fieldName);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::WISCOM::DataBase::BlobValuePtr __ret = getBlobFieldValueByName(queryIdentity, fieldName, __current);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___interrupt(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int dbHandle;
    __is->read(dbHandle);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = interrupt(dbHandle, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::___finalize(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string queryIdentity;
    __is->read(queryIdentity);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = finalize(queryIdentity, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __WISCOM__DataBase__SQLiteOperator_all[] =
{
    "closeDB",
    "eof",
    "execDML",
    "execDMLWithBlob",
    "execQuery",
    "fieldDataType",
    "fieldIndex",
    "fieldIsNullById",
    "fieldIsNullByName",
    "fieldName",
    "finalize",
    "getBlobFieldValueByIndex",
    "getBlobFieldValueByName",
    "getFloatFieldValueByIndex",
    "getFloatFieldValueByName",
    "getIntFieldValueByIndex",
    "getIntFieldValueByName",
    "getStringFieldValueByIndex",
    "getStringFieldValueByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "interrupt",
    "lastRowId",
    "nextRow",
    "numFields",
    "openDB"
};

::Ice::DispatchStatus
WISCOM::DataBase::SQLiteOperator::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__WISCOM__DataBase__SQLiteOperator_all, __WISCOM__DataBase__SQLiteOperator_all + 28, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __WISCOM__DataBase__SQLiteOperator_all)
    {
        case 0:
        {
            return ___closeDB(in, current);
        }
        case 1:
        {
            return ___eof(in, current);
        }
        case 2:
        {
            return ___execDML(in, current);
        }
        case 3:
        {
            return ___execDMLWithBlob(in, current);
        }
        case 4:
        {
            return ___execQuery(in, current);
        }
        case 5:
        {
            return ___fieldDataType(in, current);
        }
        case 6:
        {
            return ___fieldIndex(in, current);
        }
        case 7:
        {
            return ___fieldIsNullById(in, current);
        }
        case 8:
        {
            return ___fieldIsNullByName(in, current);
        }
        case 9:
        {
            return ___fieldName(in, current);
        }
        case 10:
        {
            return ___finalize(in, current);
        }
        case 11:
        {
            return ___getBlobFieldValueByIndex(in, current);
        }
        case 12:
        {
            return ___getBlobFieldValueByName(in, current);
        }
        case 13:
        {
            return ___getFloatFieldValueByIndex(in, current);
        }
        case 14:
        {
            return ___getFloatFieldValueByName(in, current);
        }
        case 15:
        {
            return ___getIntFieldValueByIndex(in, current);
        }
        case 16:
        {
            return ___getIntFieldValueByName(in, current);
        }
        case 17:
        {
            return ___getStringFieldValueByIndex(in, current);
        }
        case 18:
        {
            return ___getStringFieldValueByName(in, current);
        }
        case 19:
        {
            return ___ice_id(in, current);
        }
        case 20:
        {
            return ___ice_ids(in, current);
        }
        case 21:
        {
            return ___ice_isA(in, current);
        }
        case 22:
        {
            return ___ice_ping(in, current);
        }
        case 23:
        {
            return ___interrupt(in, current);
        }
        case 24:
        {
            return ___lastRowId(in, current);
        }
        case 25:
        {
            return ___nextRow(in, current);
        }
        case 26:
        {
            return ___numFields(in, current);
        }
        case 27:
        {
            return ___openDB(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
WISCOM::DataBase::SQLiteOperator::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
WISCOM::DataBase::SQLiteOperator::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
WISCOM::DataBase::SQLiteOperator::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type WISCOM::DataBase::SQLiteOperator was not generated with stream support";
    throw ex;
}

void
WISCOM::DataBase::SQLiteOperator::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type WISCOM::DataBase::SQLiteOperator was not generated with stream support";
    throw ex;
}
#endif

void 
WISCOM::DataBase::__patch__SQLiteOperatorPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::WISCOM::DataBase::SQLiteOperatorPtr* p = static_cast< ::WISCOM::DataBase::SQLiteOperatorPtr*>(__addr);
    assert(p);
    *p = ::WISCOM::DataBase::SQLiteOperatorPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::WISCOM::DataBase::SQLiteOperator::ice_staticId(), v->ice_id());
    }
}
